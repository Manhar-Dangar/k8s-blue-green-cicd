name: EKS-cicd

on:
  push:
    branches:
      - dev
  pull_request_target: 
    types:
      - closed

env: 
  AWS_REGION: ap-south-1
  SHORT_SHA: $(echo ${{ github.sha }} | cut -c 1-8)

jobs:
  
  green-deployment:
    runs-on: self-hosted
    if:  startsWith(github.head_ref, 'dev')

    steps:
    - name: Clone
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
      
    - name: Login to Amazon ECR
      run: |
        pwd
        ls
#        aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 635261526007.dkr.ecr.ap-south-1.amazonaws.com

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{steps.login-ecr.outputs.registry}}
      run: |
        docker build -t k8s-cicd-green ./app/ 
        docker tag k8s-cicd-green:latest 635261526007.dkr.ecr.ap-south-1.amazonaws.com/k8s-cicd-green:latest
        .
        docker push ${{ env.ECR_REGISTRY }}/k8s-cicd-green:latest
        docker push ${{ env.ECR_REGISTRY }}/k8s-cicd-green:${{ env.SHORT_SHA }}

    - name: Install and configure kubectl
      run: |
        VERSION=$(curl --silent https://storage.googleapis.com/kubernetes-release/release/stable.txt)
        curl https://storage.googleapis.com/kubernetes-release/release/$VERSION/bin/linux/amd64/kubectl \
          --progress-bar \
          --location \
          --remote-name
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/
        echo ${{ secrets.KUBECONFIG }} | base64 --decode > kubeconfig.yaml
    - name: Update K8s
      run: |
        export CLR=green
        export PRT=30081
        envsubst < ./manifest.yml | kubectl apply -f -
        kubectl rollout restart deployment prod-green
  
  blue-deployment:
    runs-on: self-hosted
    if:  startsWith(github.head_ref, 'stage')

    steps:
    - name: Clone
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
      
    - name: Login to Amazon ECR
      run: |
        pwd
        ls
#        aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 635261526007.dkr.ecr.ap-south-1.amazonaws.com

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{steps.login-ecr.outputs.registry}}
      run: |
        docker build ./app/ 
        --tag ${{ env.ECR_REGISTRY }}/k8s-cicd-blue:latest \
        --tag ${{ env.ECR_REGISTRY }}/k8s-cicd-blue:${{ env.SHORT_SHA }} \
        docker push 635261526007.dkr.ecr.ap-south-1.amazonaws.com/k8s-cicd-green:latest

    - name: Install and configure kubectl
      run: |
        VERSION=$(curl --silent https://storage.googleapis.com/kubernetes-release/release/stable.txt)
        curl https://storage.googleapis.com/kubernetes-release/release/$VERSION/bin/linux/amd64/kubectl \
          --progress-bar \
          --location \
          --remote-name
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/
        echo ${{ secrets.KUBECONFIG }} | base64 --decode > kubeconfig.yaml
    - name: Update K8s
      run: | 
        export CLR=blue
        export PRT=30080
        envsubst < ./manifest.yml | kubectl apply -f -
        kubectl rollout restart deployment prod-blue
